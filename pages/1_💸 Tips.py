import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
import plotly.express as px
import plotly.io as pio
import io

import warnings
warnings.filterwarnings('ignore')

st.set_page_config(page_title='Tips', page_icon="üí∏")


st.title(':blue[***–ò—Å—Å–ª–µ–¥—É–µ–º —á–∞–µ–≤—ã–µ***]  :red[–∑–∞ –Ø–Ω–≤–∞—Ä—å]:dollar:')



# –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨
st.subheader(' ', divider="gray")
st.subheader(' ')


# –ö–≠–®–ò–†–£–ï–ú –ó–ê–ì–†–£–ó–ö–£ CSV
@st.cache_data
def load_csv(file):
    return pd.read_csv(file)


# –í–´–í–û–î–ò–ú –î–ê–¢–ê–°–ï–¢ –°–û –í–°–ï–ô –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô

uploaded_file = st.sidebar.file_uploader(':green[**–ó–∞–≥—Ä—É–∑–∏ —Å—é–¥–∞ –¥–∞—Ç–∞—Å–µ—Ç**] üëá', type='csv')

if uploaded_file is not None:
    df = load_csv(uploaded_file)

    # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞—Ç 
    date_range = pd.date_range(start='2023-01-01', end='2023-01-31', periods=len(df))

    # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Å—Å–∏–≤–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–µ–∫—É–Ω–¥ –≤ —Å—É—Ç–∫–∞—Ö (–æ—Ç 0 –¥–æ 86400)
    random_seconds = np.random.randint(0, 86400, size=len(date_range))

    # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ timedelta –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –¥–∞—Ç–µ
    datetimes = date_range + pd.to_timedelta(random_seconds, unit='sec')

    # –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –Ω–∞—à –î–§
    df["time_order"] = datetimes

else:
    st.stop()

st.subheader(":gray[–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç]")
st.write(df)



# –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨
st.subheader(' ', divider="gray")
st.subheader(' ')



# –°–¢–†–û–ò–ú –ì–†–ê–§–ò–ö –ß–ê–ï–í–´–• –ó–ê –Ø–ù–í–ê–†–¨

st.subheader('**üìà –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —á–∞–µ–≤—ã—Ö**')

fig, ax = plt.subplots()
plt.style.use("classic")
sns.lineplot(data=df, x="time_order", y="tip", linewidth=2, color='green', ax=ax)  # –í—Ä–µ–º—è –ø–æ X, —á–∞–µ–≤—ã–µ –ø–æ Y

ax.set_ylim(bottom=0, top=df['tip'].max() * 1.1)  # +10% –∑–∞–ø–∞—Å–∞ —Å–≤–µ—Ä—Ö—É, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ Y


ax.set_xlabel("–î–∞—Ç–∞", color="red")
ax.set_ylabel("–ß–∞–µ–≤—ã–µ ($)", color="blue")

ax.grid(True, linestyle='--', alpha=0.7)

max_tip_idx = df['tip'].idxmax() # –Ω–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü (–∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏)

# –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –∑–Ω–∞—á–µ–Ω–∏—è
ax.annotate(f'–ú–∞–∫—Å: {df.loc[max_tip_idx, "tip"]}$',
            xy=(df.loc[max_tip_idx, "time_order"], df.loc[max_tip_idx, "tip"]), # –¢–æ—á–∫–∞ (X, Y)
            xytext=(10, 10), textcoords='offset points',
            arrowprops=dict(arrowstyle='->', color='magenta'))


min_tip_idx = df['tip'].idxmin()

# –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–æ–≤–æ–µ)
ax.annotate(f'–ú–∏–Ω: {df.loc[min_tip_idx, "tip"]}$',
            xy=(df.loc[min_tip_idx, "time_order"], df.loc[min_tip_idx, "tip"]),
            xytext=(10, -20),  # –†–∞–∑–º–µ—â–∞–µ–º –Ω–∏–∂–µ —Ç–æ—á–∫–∏
            textcoords='offset points',
            arrowprops=dict(arrowstyle='->', color='magenta'))

plt.xticks(rotation=45)  # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –ø–æ X, —á—Ç–æ–±—ã –≤—Å—ë –≤–ª–∞–∑–∏–ª–æ
plt.tight_layout()

st.pyplot(fig)

# –î–æ–±–∞–≤–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
st.subheader("üìò –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞–µ–≤—ã–º:")
st.subheader(f"- –°—Ä–µ–¥–Ω–µ–µ: {df['tip'].mean():.2f}$")
st.subheader(f"- –ú–∞–∫—Å–∏–º—É–º: {df['tip'].max():.2f}$")
st.subheader(f"- –ú–∏–Ω–∏–º—É–º: {df['tip'].min():.2f}$")


# –°–ö–ê–ß–ò–í–ê–ï–ú –ì–†–ê–§–ò–ö –ü–û –ß–ê–ï–í–´–ú –ß–ï–†–ï–ó –ö–ù–û–ü–ö–£

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é io.BytesIO
buffer = io.BytesIO()
fig.savefig(buffer, format='png')
buffer.seek(0) # –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–∞

st.sidebar.download_button('üìò :green[–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —á–∞–µ–≤—ã—Ö –∑–∞ —è–Ω–≤–∞—Ä—å]', 
                                                data=buffer, 
                                                file_name='tips_per_january.png',
                                                mime='image/png')



# –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨
st.subheader(' ', divider="gray")
st.subheader(' ')



st.subheader('**üìä–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º —Å—á–µ—Ç–æ–≤**')
st.subheader('')

chart = alt.Chart(df).mark_bar().encode(alt.X('total_bill', bin=alt.Bin(maxbins=30), title='–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤'), 
                                        alt.Y('count()', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
                                        ).configure_axis(labelColor='red', titleColor='green')

st.altair_chart(chart, use_container_width=True)



# –°–ö–ê–ß–ò–í–ê–ï–ú –ì–†–ê–§–ò–ö –ì–ò–°–¢–û–ì–†–ê–ú–ú–´ –ü–û –°–ß–ï–¢–ê–ú

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é io.BytesIO
alt_buffer = io.BytesIO()
chart.save(alt_buffer, format='png')
alt_buffer.seek(0) # –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–∞

st.sidebar.download_button('üìä :green[–°–∫–∞—á–∞—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Å—É–º–º —Å—á–µ—Ç–æ–≤]', 
                            data=alt_buffer, 
                            file_name='histogram.png',
                            mime='image/png')



# –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨
st.subheader(' ', divider="gray")
st.subheader(' ')



# –°–¢–†–û–ò–ú –¢–û–ß–ï–ß–ù–´–ô –ì–†–ê–§–ò–ö –°–í–Ø–ó–ò –°–ß–ï–¢–ê –ò –ß–ê–ï–í–´–•

st.subheader('üî¥ **–ì—Ä–∞—Ñ–∏–∫ —Å–≤—è–∑–∏ —Å—É–º–º—ã —Å—á–µ—Ç–∞ –∫ —á–∞–µ–≤—ã–º**')


fig = px.scatter(df, x='total_bill', 
                 y='tip', 
                 size='size', # –ö–æ–ª–∏—á–ø–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ —É —Å—á–µ—Ç–∞
                 color='size',
                 color_continuous_scale='Viridis',
                 labels={'total_bill': '–°—É–º–º–∞ —Å—á–µ—Ç–∞', 'tip': '–ß–∞–µ–≤—ã–µ', 'size': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫'},
                 opacity=0.7)

fig.update_traces(
    marker=dict(
        line=dict(width=1, color='black'),  # —Ä–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ —Ç–æ—á–µ–∫
        symbol='circle'
    )
)


# —Ü–≤–µ—Ç –∏ –¥—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π
fig.update_layout(
    xaxis=dict(
        showgrid=True,
        gridcolor='LightGray',
        gridwidth=2,
        tickfont=dict(color='red'),
        title_font=dict(color='darkred'),
        title_text="–°—É–º–º–∞ —á–µ–∫–∞"
    ),
    yaxis=dict(
        showgrid=True,
        gridcolor='LightGray',
        gridwidth=2,
        tickfont=dict(color='blue'),
        title_font=dict(color='darkblue'),
        title_text="–ß–∞–µ–≤—ã–µ"
    )
)

st.plotly_chart(fig, use_container_width=True)


# –°–ö–ê–ß–ò–í–ê–ï–ú –¢–û–ß–ï–ß–ù–´–ô –ì–†–ê–§–ò–ö –°–í–Ø–ó–ò –°–ß–ï–¢–ê –ò –ß–ê–ï–í–´–•

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
px_buffer = io.BytesIO()
pio.write_image(fig, px_buffer, format='png')
px_buffer.seek(0)

st.sidebar.download_button(
    label="üî¥ :green[–°–∫–∞—á–∞—Ç—å —Ç–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—á–µ—Ç–∞ –∏ —á–∞–µ–≤—ã—Ö]",
    data=px_buffer,
    file_name="scatter_plot.png",
    mime="image/png"
)